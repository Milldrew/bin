#!/bin/bash
yarn init -y
yarn add -D parcel puppeteer jest-puppeteer jest
mkdir src
mkdir -p __tests__/unit_test ui_screenshots
cat >> src/app.js <<EOF
console.log('hello from src/app.js');
EOF
cat >> src/style.css <<EOF
/*
TODO
Add signifiers affordances and clickability.
clickability: curoser --> pointers
button: hover animations
anchor tag: animations
*/
:root {
  --pastel-blue: #46AFE3;
  --pastel-yellow: #E3DD30;
  --light-blue: #19A6FF;
  --main-orange: #ff7E19;
  --main-blue: #4319FF;
  --main-green: #00FF00;
  --main-red: #FF0000;
  --error: #E3192D;
  --success: #12B312;
  --warning: #FFFC19;
  --default-bright-gray:#E6E6E6;
  --default-bright:#BFBFBF;
  --default-dark-gray:#808080;
  --default-gray:#808080;
  --default-off-black:#404040;
  --default-white:#FFFFFF;
}
a, button {
  cursor: pointer;
}
a:hover,
button:hover {
  color: pink;
}

* {
  padding: 0 0;
  margin: 0 0;
  box-sizing: border-box;
  background-color: var(--default-dark-gray);
  color: var(--default-white);
  font-family: 'PT Sans', Sans-Serif;
}
/* font-weight 400 is default */
h1 {
  font-size: 96px;
  letter-spacing: -1.5px;
  font-weight: 300;
}
h2 {
  font-size: 60px;
  letter-spacing: -0.5px;
  font-weight: 300;
}
h3 {
  font-size: 48px;
}
h4 {
  font-size: 34px;
  letter-spacing: .25px;
}

p {
  Font-Family: 'Playfair Display', Serif;
  Font-Size: 30px;
  line-height: 1.5;  
  letter-spacing: .5px;
}


EOF
cat >> src/index.html <<EOF
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8"/>
    <link href="https://fonts.googleapis.com/css?family=PT+Sans:700|Playfair+Display" rel="stylesheet">
    <link href="./style.css" type="text/css" rel="stylesheet"/>
    <script type="module" src="app.js"></script>
  <title>test me</title>
  </head>
  <body>
  <header>
  <nav>
  <h1>Title</h1> 
  </nav>
  </header>
  <main>
  <h2><a>FooBar</a></h2>
  <button><h2>button</h2></button>
  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. </p>
  </main>
  <footer>
  </footer>
  </body>
</html>
EOF
cat > package.json <<EOF
{
  "name": "test",
  "source": "src/index.html",
  "browerslist": "0> 0.5%, last 2 versions, not dead",
  "main": "index.js",
  "license": "MIT",
  "devDependencies": {
    "parcel": "^2.1.0"
  }
}
EOF
cat > ./ui_screenshots/mock-screenshot.js <<EOF
const puppeteer = require("puppeteer");
(async () => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto("http://localhost:7777");
  await page.waitForTimeout(1000);
  await page.screenshot({path: "mock-screenshot.jpg"});
  await browser.close();
})();
EOF
cat > ./__tests__/unit_test/mock.test.js <<EOF
/**
 * @jest-environment puppeteer
 */
describe("mock teset", () => {
  beforeAll(async () => {
    await page.goto("http://localhost:7777");
  });

  it('title should be say "test me" ', async () => {
    await expect(await page.title()).toMatch("test me");
  });
});
EOF
cat > jest.config.js <<EOF
/*
 * For a detailed explanation regarding each configuration property, visit:
 * https://jestjs.io/docs/configuration
 */

module.exports = {
  // All imported modules in your tests should be mocked automatically
  // automock: false,

  // Stop running tests after `n` failures
  // bail: 0,

  // The directory where Jest should store its cached dependency information
  // cacheDirectory: "/private/var/folders/6r/pnsnxlpn1k53vrf4wj_1cxv40000gn/T/jest_dx",

  // Automatically clear mock calls, instances and results before every test
  clearMocks: true,

  // Indicates whether the coverage information should be collected while executing the test
  collectCoverage: true,

  // An array of glob patterns indicating a set of files for which coverage information should be collected
  // collectCoverageFrom: undefined,

  // The directory where Jest should output its coverage files
  coverageDirectory: "coverage",

  // An array of regexp pattern strings used to skip coverage collection
  // coveragePathIgnorePatterns: [
  //   "/node_modules/"
  // ],

  // Indicates which provider should be used to instrument code for coverage
  coverageProvider: "v8",

  // A list of reporter names that Jest uses when writing coverage reports
  // coverageReporters: [
  //   "json",
  //   "text",
  //   "lcov",
  //   "clover"
  // ],

  // An object that configures minimum threshold enforcement for coverage results
  // coverageThreshold: undefined,

  // A path to a custom dependency extractor
  // dependencyExtractor: undefined,

  // Make calling deprecated APIs throw helpful error messages
  // errorOnDeprecated: false,

  // Force coverage collection from ignored files using an array of glob patterns
  // forceCoverageMatch: [],

  // A path to a module which exports an async function that is triggered once before all test suites
  // globalSetup: undefined,

  // A path to a module which exports an async function that is triggered once after all test suites
  // globalTeardown: undefined,

  // A set of global variables that need to be available in all test environments
  // globals: {},

  // The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.
  // maxWorkers: "50%",

  // An array of directory names to be searched recursively up from the requiring module's location
  // moduleDirectories: [
  //   "node_modules"
  // ],

  // An array of file extensions your modules use
  // moduleFileExtensions: [
  //   "js",
  //   "jsx",
  //   "ts",
  //   "tsx",
  //   "json",
  //   "node"
  // ],

  // A map from regular expressions to module names or to arrays of module names that allow to stub out resources with a single module
  // moduleNameMapper: {},

  // An array of regexp pattern strings, matched against all module paths before considered 'visible' to the module loader
  // modulePathIgnorePatterns: [],

  // Activates notifications for test results
  // notify: false,

  // An enum that specifies notification mode. Requires { notify: true }
  // notifyMode: "failure-change",

  // A preset that is used as a base for Jest's configuration
   preset: "jest-puppeteer",

  // Run tests from one or more projects
  // projects: undefined,

  // Use this configuration option to add custom reporters to Jest
  // reporters: undefined,

  // Automatically reset mock state before every test
  // resetMocks: false,

  // Reset the module registry before running each individual test
  // resetModules: false,

  // A path to a custom resolver
  // resolver: undefined,

  // Automatically restore mock state and implementation before every test
  // restoreMocks: false,

  // The root directory that Jest should scan for tests and modules within
  // rootDir: undefined,

  // A list of paths to directories that Jest should use to search for files in
  // roots: [
  //   "<rootDir>"
  // ],

  // Allows you to use a custom runner instead of Jest's default test runner
  // runner: "jest-runner",

  // The paths to modules that run some code to configure or set up the testing environment before each test
  // setupFiles: [],

  // A list of paths to modules that run some code to configure or set up the testing framework before each test
  // setupFilesAfterEnv: [],

  // The number of seconds after which a test is considered as slow and reported as such in the results.
  // slowTestThreshold: 5,

  // A list of paths to snapshot serializer modules Jest should use for snapshot testing
  // snapshotSerializers: [],

  // The test environment that will be used for testing
  testEnvironment: "jsdom",

  // Options that will be passed to the testEnvironment
  // testEnvironmentOptions: {},

  // Adds a location field to test results
  // testLocationInResults: false,

  // The glob patterns Jest uses to detect test files
  // testMatch: [
  //   "**/__tests__/**/*.[jt]s?(x)",
  //   "**/?(*.)+(spec|test).[tj]s?(x)"
  // ],

  // An array of regexp pattern strings that are matched against all test paths, matched tests are skipped
  // testPathIgnorePatterns: [
  //   "/node_modules/"
  // ],

  // The regexp pattern or array of patterns that Jest uses to detect test files
  // testRegex: [],

  // This option allows the use of a custom results processor
  // testResultsProcessor: undefined,

  // This option allows use of a custom test runner
  // testRunner: "jest-circus/runner",

  // This option sets the URL for the jsdom environment. It is reflected in properties such as location.href
  // testURL: "http://localhost",

  // Setting this value to "fake" allows the use of fake timers for functions such as "setTimeout"
  // timers: "real",

  // A map from regular expressions to paths to transformers
  // transform: undefined,

  // An array of regexp pattern strings that are matched against all source file paths, matched files will skip transformation
  // transformIgnorePatterns: [
  //   "/node_modules/",
  //   "\\.pnp\\.[^\\/]+$"
  // ],

  // An array of regexp pattern strings that are matched against all modules before the module loader will automatically return a mock for them
  // unmockedModulePathPatterns: undefined,

  // Indicates whether each individual test should be reported during the run
  // verbose: undefined,

  // An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode
  // watchPathIgnorePatterns: [],

  // Whether to use watchman for file crawling
  // watchman: true,
};
EOF

PORT=7777 yarn parcel src/index.html &
yarn jest
node ui_screenshots/mock-screenshot.js
echo "run '>node ui_screenshots/mock-screenshot.js' \n to take a screen shot"
